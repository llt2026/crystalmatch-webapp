// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["metrics", "fullTextSearchPostgres", "postgresqlExtensions"]
  engineType      = "binary"
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgcrypto, vector]
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  name          String?
  emailVerified DateTime?
  avatar        String?
  location      Json?
  birthInfo     Json?
  preferences   Json?
  role          String         @default("user")
  isActive      Boolean        @default(true)
  lastLoginAt   DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  orders        Order[]
  subscriptions Subscription[]
  @@index([email])
  @@index([role])
}

model SubscriptionPlan {
  id            String         @id @default(uuid())
  name          String
  description   String?
  price         Float
  period        String
  features      Json
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscriptions Subscription[]
}

model Subscription {
  id          String           @id @default(uuid())
  status      String
  startDate   DateTime         @default(now())
  endDate     DateTime?
  renewalDate DateTime?
  cancelledAt DateTime?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  userId      String
  planId      String
  orders      Order[]
  plan        SubscriptionPlan @relation(fields: [planId], references: [id])
  user        User             @relation(fields: [userId], references: [id])
}

model Order {
  id             String        @id @default(uuid())
  amount         Float
  currency       String        @default("USD")
  status         String
  paymentMethod  String?
  transactionId  String?
  metadata       Json?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  userId         String
  subscriptionId String?
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  user           User          @relation(fields: [userId], references: [id])
}

model EnergyReport {
  id        String   @id @default(uuid())
  userId    String
  title     String
  birthData Json
  content   Json
  crystals  Json[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EnergyReportCache {
  id            String   @id @default(uuid())
  userId        String
  birthDate     String
  reportMonth   String
  tier          String
  report        String
  energyContext String
  generatedAt   DateTime @default(now())
  updatedAt     DateTime @updatedAt
  expiresAt     DateTime

  @@unique([userId, birthDate, reportMonth, tier], name: "report_unique_constraint")
  @@index([userId, reportMonth])
  @@index([expiresAt])
}

model Log {
  id        String   @id @default(uuid())
  action    String
  entity    String
  entityId  String?
  userId    String?
  details   Json?
  createdAt DateTime @default(now())
}
